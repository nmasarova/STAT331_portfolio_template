---
title: "STAT 331 Portfolio"
author: "Natalie Masarova"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
# From Lab 2, Problem 1

surveys <- read_csv(here::here("week_2", "surveys.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
# From Lab 3, Problem 2
teacher_evals <- read_csv(here::here("week_3", "teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
# From Lab 3, Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(
    teacher_id = as.character(teacher_id),
    weekday =  as.character(weekday)) |>
  select(
    course_id,
    teacher_id, 
    question_no, 
    no_participants, 
    resp_share, 
    SET_score_avg, 
    percent_failed_cur, 
    academic_degree, 
    seniority, 
    sex )
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
# From Lab 3, Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter( no_participants > 10) |>
  mutate(
    teacher_id = as.character(teacher_id),
    weekday =  as.character(weekday)
  ) |>
  select(
    course_id,
    teacher_id, 
    question_no, 
    no_participants, 
    resp_share, 
    SET_score_avg, 
    percent_failed_cur, 
    academic_degree, 
    seniority, 
    sex )
```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1
# From Lab 4, Question 5
region_table <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by (census_region, study_year) |>
  summarize(median_income = median(mhi_2018)) |>
  ungroup() |>
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "Year ") |>
  arrange(desc('2018'))
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
# Challenge 4
ca_childcare <- counties |>
  filter(
    state_name == "California"
  ) |>
  left_join(
    y = childcare_costs,
    by = join_by(county_fips_code == county_fips_code)
  )
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
# From Lab 3, Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter( no_participants > 10) |>
  mutate(
    teacher_id = as.character(teacher_id),
    weekday =  as.character(weekday)
  ) |>
  select(
    course_id,
    teacher_id, 
    question_no, 
    no_participants, 
    resp_share, 
    SET_score_avg, 
    percent_failed_cur, 
    academic_degree, 
    seniority, 
    sex )
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1
# From Challenge 3, Question 1
teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903) |>
  mutate(
    set_level = if_else(SET_score_avg >= 4, "Excellent", "Standard"),
    sen_level = case_when(
      seniority <= 4 ~ "Junior",
      seniority >= 5 & seniority <= 8 ~ "Senior",
      seniority > 8 ~ "Very Senior"
    )) |>
  select(set_level, sen_level, course_id)
```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
# Challenge 4
ca_childcare <- counties |>
  filter(
    state_name == "California"
  ) |>
  left_join(
    y = childcare_costs,
    by = join_by(county_fips_code == county_fips_code)
  )
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
# From Challenge 4
childcare_vs_poverty <- ca_childcare |>
  select(mc_infant, mc_toddler, mc_preschool, mfcc_infant, mfcc_preschool, mfcc_toddler, pr_f) |>
  pivot_longer(
    cols = starts_with("mc"),
    names_to = "center_age_group",
    values_to = "median_center_cost"
  ) |>
  mutate(
    center_age_group = case_when(
      center_age_group == "mc_infant" ~ "Infant",
      center_age_group == "mc_toddler" ~ "Toddler",
      center_age_group == "mc_preschool" ~ "Preschool"
    )
  ) |>
  pivot_longer(
    cols = starts_with("mfcc"),
    names_to = "home_age_group",
    values_to = "median_home_cost"
  ) |>
  mutate(
     home_age_group = case_when(
      home_age_group == "mfcc_infant" ~ "Infant",
      home_age_group == "mfcc_toddler" ~ "Toddler",
      home_age_group == "mfcc_preschool" ~ "Preschool"
    )) |>
 mutate(
    poverty_rate = cut(
      pr_f,
      breaks = 3,
      labels = c("low", "medium", "high"))
  )
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
# From Lab 4, Question 5
region_table <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by (census_region, study_year) |>
  summarize(median_income = median(mhi_2018)) |>
  ungroup() |>
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "Year ") |>
  arrange(desc('2018'))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
# Challenge 4
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(census_region = fct_collapse(
    .f = county_name,
    "superior" = superior_counties,
    "northcoast" = north_coast_counties,
    "sanfran" = san_fran_counties,
    "northsanjoaquin" = n_san_joaquin_counties,
    "centralcoast" = central_coast_counties,
    "southsanjoaquin" = s_san_joaquin_counties,
    "inland" = inland_counties,
    "la" = la_county,
    "orange county" = orange_county,
    "sandiegoimperial" = san_diego_imperial_counties
  ))
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
# From Lab 3, Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter( no_participants > 10) |>
  mutate(
    teacher_id = as.character(teacher_id),
    weekday =  as.character(weekday)
  ) |>
  select(
    course_id,
    teacher_id, 
    question_no, 
    no_participants, 
    resp_share, 
    SET_score_avg, 
    percent_failed_cur, 
    academic_degree, 
    seniority, 
    sex )
```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3
# From Challenge 4, childcare_vs_poverty <- ca_childcare |>
  select(mc_infant, mc_toddler, mc_preschool, mfcc_infant, mfcc_preschool, mfcc_toddler, pr_f) |>
  pivot_longer(
    cols = starts_with("mc"),
    names_to = "center_age_group",
    values_to = "median_center_cost"
  ) |>
  mutate(
    center_age_group = case_when(
      center_age_group == "mc_infant" ~ "Infant",
      center_age_group == "mc_toddler" ~ "Toddler",
      center_age_group == "mc_preschool" ~ "Preschool"
    )
  ) |>
  pivot_longer(
    cols = starts_with("mfcc"),
    names_to = "home_age_group",
    values_to = "median_home_cost"
  ) |>
  mutate(
     home_age_group = case_when(
      home_age_group == "mfcc_infant" ~ "Infant",
      home_age_group == "mfcc_toddler" ~ "Toddler",
      home_age_group == "mfcc_preschool" ~ "Preschool"
    )) |>
 mutate(
    poverty_rate = cut(
      pr_f,
      breaks = 3,
      labels = c("low", "medium", "high"))
  )
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
# From Lab 3, Question 6
teacher_evals_clean |>
  summarize(
    n_distinct(course_id),
    n_distinct(teacher_id))
```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
# From Lab 3, Question 6
teacher_evals_clean |>
  summarize(
    n_distinct(course_id),
    n_distinct(teacher_id))
```

-   Example 2

```{r}
#| label: dvs-5-2
# From Lab 4, Question 5
region_table <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by (census_region, study_year) |>
  summarize(median_income = median(mhi_2018)) |>
  ungroup() |>
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "Year ") |>
  arrange(desc('2018'))
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

```

-   Example 2

```{r}
#| label: dsm-2-2

```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
