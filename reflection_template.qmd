---
title: "STAT 331 Portfolio"
author: "Natalie Masarova"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be a B.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
# From Lab 2, Problem 1
surveys <- read_csv(here::here("week_2", "surveys.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
# From Lab 3, Problem 2
teacher_evals <- read_csv(here::here("week_3", "teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
# From Lab 3, Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(
    teacher_id = as.character(teacher_id),
    weekday =  as.character(weekday)) |>
  select(
    course_id,
    teacher_id, 
    question_no, 
    no_participants, 
    resp_share, 
    SET_score_avg, 
    percent_failed_cur, 
    academic_degree, 
    seniority, 
    sex )
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2
# From Lab 3, Question 5 Revised
# Simply showed how I would remove these columns instead of selecting them, to show this action
teacher_evals_clean <- teacher_evals |>
  select(
    !course_id,
    !teacher_id, 
    !question_no, 
    !no_participants, 
    !resp_share)
```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
# From Lab 3, Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(
    teacher_id = as.character(teacher_id),
    weekday =  as.character(weekday)) |>
  select(
    course_id,
    teacher_id, 
    question_no, 
    no_participants, 
    resp_share, 
    SET_score_avg, 
    percent_failed_cur, 
    academic_degree, 
    seniority, 
    sex )
```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1
# From Lab 4, Question 5
region_table <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by (census_region, study_year) |>
  summarize(median_income = median(mhi_2018)) |>
  ungroup() |>
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "Year ") |>
  arrange(desc('2018'))
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
# Challenge 4
ca_childcare <- counties |>
  filter(
    state_name == "California") |>
  left_join(
    y = childcare_costs,
    by = join_by(county_fips_code == county_fips_code))
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
# From Lab 5
person1 <- person |>
  left_join(
    get_fit_now_member |>
    rename(member_id = id),
    by = join_by (name == name)) |>
  left_join(
    drivers_license,
    by = join_by (license_id == id)) |>
  left_join(
    get_fit_now_check_in,
    by = join_by (member_id == membership_id)) |>
  mutate(
    check_in_date = ymd(check_in_date)) |>
  filter(
    gender == "male",
    str_detect(plate_number, pattern = "H42"),
    membership_status == "gold",
    str_detect(member_id, pattern = "48Z"))
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
# From Lab 5
person1 <- person |>
  left_join(
    get_fit_now_member |>
    rename(member_id = id),
    by = join_by (name == name)) |>
  left_join(
    drivers_license,
    by = join_by (license_id == id)) |>
  left_join(
    get_fit_now_check_in,
    by = join_by (member_id == membership_id)) |>
  mutate(
    check_in_date = ymd(check_in_date)) |>
  filter(
    gender == "male",
    str_detect(plate_number, pattern = "H42"),
    membership_status == "gold",
    str_detect(member_id, pattern = "48Z"))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
# From Lab 3, Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter( no_participants > 10) |>
  mutate(
    teacher_id = as.character(teacher_id),
    weekday =  as.character(weekday)
  ) |>
  select(
    course_id,
    teacher_id, 
    question_no, 
    no_participants, 
    resp_share, 
    SET_score_avg, 
    percent_failed_cur, 
    academic_degree, 
    seniority, 
    sex )
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1
# From Challenge 3, Question 1
teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903) |>
  mutate(
    set_level = if_else(SET_score_avg >= 4, "Excellent", "Standard"),
    sen_level = case_when(
      seniority <= 4 ~ "Junior",
      seniority >= 5 & seniority <= 8 ~ "Senior",
      seniority > 8 ~ "Very Senior"
    )) |>
  select(set_level, sen_level, course_id)
```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
# From Lab 5
person1 <- person |>
  left_join(
    get_fit_now_member |>
    rename(member_id = id),
    by = join_by (name == name)) |>
  left_join(
    drivers_license,
    by = join_by (license_id == id)) |>
  left_join(
    get_fit_now_check_in,
    by = join_by (member_id == membership_id)) |>
  mutate(
    check_in_date = ymd(check_in_date)) |>
  filter(
    gender == "male",
    str_detect(plate_number, pattern = "H42"),
    membership_status == "gold",
    str_detect(member_id, pattern = "48Z"))
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
# Challenge 4
ca_childcare <- counties |>
  filter(state_name == "California") |>
  left_join(
    y = childcare_costs,
    by = join_by(county_fips_code))
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right
# Challenge 4, Edited
# Changed my pipeline to be a right join instead
ca_childcare <- childcare_costs |>
  right_join(
    x = counties,
    by = join_by(county_fips_code)) |>
  filter(state_name == "California")
```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2
# From Lab 5
person1 <- person |>
  left_join(
    get_fit_now_member |>
    rename(member_id = id),
    by = join_by (name == name)) |>
  left_join(
    drivers_license,
    by = join_by (license_id == id)) |>
  left_join(
    get_fit_now_check_in,
    by = join_by (member_id == membership_id)) |>
  mutate(
    check_in_date = ymd(check_in_date)) |>
  filter(
    gender == "male",
    str_detect(plate_number, pattern = "H42"),
    membership_status == "gold",
    str_detect(member_id, pattern = "48Z"))
```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1
# Challenge 4, Edited
# Changed my pipeline to be an inner join instead
ca_childcare <- counties |>
  filter(state_name == "California") |>
  inner_join(
    y = childcare_costs,
    by = join_by(county_fips_code))
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2
# From Lab 5, Edited
# Changed my pipeline to be an inner join instead
person1 <- person |>
  inner_join(
    get_fit_now_member |>
    rename(member_id = id),
    by = join_by (name == name))
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
# From Lab 5, Edited
# Changed my pipeline to be a semi join instead
person1 <- person |>
  semi_join(
    get_fit_now_member |>
    rename(member_id = id),
    by = join_by (name == name))
```

-   `anti_join()`

```{r}
#| label: wd-6-anti
# Lab 5, Edited
# Changed my pipeline to be an anti join instead
suspectinterview <- person |>
  filter(
    name == "Miranda Priestly") |>
  anti_join(
    interview, by = c("id" = "person_id"))
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
# From Challenge 4
childcare_vs_poverty <- ca_childcare |>
  select(mc_infant, mc_toddler, mc_preschool, mfcc_infant, mfcc_preschool, mfcc_toddler, pr_f) |>
  pivot_longer(
    cols = starts_with("mc"),
    names_to = "center_age_group",
    values_to = "median_center_cost"
  ) |>
  mutate(
    center_age_group = case_when(
      center_age_group == "mc_infant" ~ "Infant",
      center_age_group == "mc_toddler" ~ "Toddler",
      center_age_group == "mc_preschool" ~ "Preschool"
    )
  ) |>
  pivot_longer(
    cols = starts_with("mfcc"),
    names_to = "home_age_group",
    values_to = "median_home_cost"
  ) |>
  mutate(
     home_age_group = case_when(
      home_age_group == "mfcc_infant" ~ "Infant",
      home_age_group == "mfcc_toddler" ~ "Toddler",
      home_age_group == "mfcc_preschool" ~ "Preschool"
    )) |>
 mutate(
    poverty_rate = cut(
      pr_f,
      breaks = 3,
      labels = c("low", "medium", "high"))
  )
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
# From Lab 4, Question 5
region_table <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by (census_region, study_year) |>
  summarize(median_income = median(mhi_2018)) |>
  ungroup() |>
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "Year ") |>
  arrange(desc('2018'))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
# Lab 4, Question 8
ca_childcare |>
  filter() |>
  ggplot(aes(x = mhi_2018, y = mfcc_infant)) +
  theme_light() +
  geom_point(alpha = 0.5, color = "plum") +
  geom_smooth(method = "lm", se = FALSE, color = "mediumorchid4") +
  labs(
    title = "Median Income (per Household) vs. Weekly Infant Childcare Cost (in California)",
    x = "Median Household Income",
    y = "Median Weekly Infant Cost") +
  scale_y_continuous(labels = scales:: label_currency(prefix = "$"))+
  scale_x_continuous(labels = scales:: label_currency(prefix = "$"))
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
# Lab 4, Question 8
ca_childcare |>
  filter() |>
  ggplot(aes(x = mhi_2018, y = mfcc_infant)) +
  theme_light() +
  geom_point(alpha = 0.5, color = "plum") +
  geom_smooth(method = "lm", se = FALSE, color = "mediumorchid4") +
  labs(
    title = "Median Income (per Household) vs. Weekly Infant Childcare Cost (in California)",
    x = "Median Household Income",
    y = "Median Weekly Infant Cost") +
  scale_y_continuous(labels = scales:: label_currency(prefix = "$"))+
  scale_x_continuous(labels = scales:: label_currency(prefix = "$"))
```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example
# From Lab 3, Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter( no_participants > 10) |>
  mutate(
    teacher_id = as.character(teacher_id),
    weekday =  as.character(weekday)
  ) |>
  select(
    course_id,
    teacher_id, 
    question_no, 
    no_participants, 
    resp_share, 
    SET_score_avg, 
    percent_failed_cur, 
    academic_degree, 
    seniority, 
    sex )
```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
# Lab 4, Question 8
ca_childcare |>
  filter() |>
  ggplot(aes(x = mhi_2018, y = mfcc_infant)) +
  theme_light() +
  geom_point(alpha = 0.5, color = "plum") +
  geom_smooth(method = "lm", se = FALSE, color = "mediumorchid4") +
  labs(
    title = "Median Income (per Household) vs. Weekly Infant Childcare Cost (in California)",
    x = "Median Household Income",
    y = "Median Weekly Infant Cost") +
  scale_y_continuous(labels = scales:: label_currency(prefix = "$"))+
  scale_x_continuous(labels = scales:: label_currency(prefix = "$"))
```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
# Lab 2, Question 15
ggplot(data = surveys,
    mapping = aes(x = species, y = weight))+
  geom_boxplot(outliers = FALSE)+
  geom_jitter(color= "pink", alpha = 0.5)+
  theme(axis.text.x = element_text(angle = 4))+
  labs(
    title = "Distribution of Weights",
    x = "Species",
    y = "Weight in Grams")+
  theme(
    plot.title = element_text(size = rel(2)),
    panel.border = element_rect(linetype = "dashed", color = "gray"),
    legend.position = "inside",
    legend.justification = c("right", "top"),
    legend.direction = "horizontal",
    legend.key.size = unit(.5, "cm"))
```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
# Lab 2, Question 15
ggplot(data = surveys,
    mapping = aes(x = species, y = weight))+
  geom_boxplot(outliers = FALSE)+
  geom_jitter(color= "pink", alpha = 0.5)+
  theme(axis.text.x = element_text(angle = 4))+
  labs(
    title = "Distribution of Weights",
    x = "Species",
    y = "Weight in Grams")+
  theme(
    plot.title = element_text(size = rel(2)),
    panel.border = element_rect(linetype = "dashed", color = "gray"),
    legend.position = "inside",
    legend.justification = c("right", "top"),
    legend.direction = "horizontal",
    legend.key.size = unit(.5, "cm"))
```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3
# From Challenge 4
childcare_vs_poverty <- ca_childcare |>
  select(mc_infant, mc_toddler, mc_preschool, mfcc_infant, mfcc_preschool, mfcc_toddler, pr_f) |>
  pivot_longer(
    cols = starts_with("mc"),
    names_to = "center_age_group",
    values_to = "median_center_cost") |>
  mutate(
    center_age_group = case_when(
      center_age_group == "mc_infant" ~ "Infant",
      center_age_group == "mc_toddler" ~ "Toddler",
      center_age_group == "mc_preschool" ~ "Preschool")) |>
  pivot_longer(
    cols = starts_with("mfcc"),
    names_to = "home_age_group",
    values_to = "median_home_cost") |>
  mutate(
     home_age_group = case_when(
      home_age_group == "mfcc_infant" ~ "Infant",
      home_age_group == "mfcc_toddler" ~ "Toddler",
      home_age_group == "mfcc_preschool" ~ "Preschool")) |>
 mutate(
    poverty_rate = cut(
      pr_f,
      breaks = 3,
      labels = c("low", "medium", "high")))
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4
# Lab 4, Question 7
ggplot(data = center_childcare,
       aes( x = study_year, y = median_cost, color = census_region)) +
  geom_point(alpha = 0.5, size = 1.5) +
  geom_smooth() +
  facet_wrap(~age_group) +
  theme_bw(base_size = 10) +
  labs(
    title = "Weekly Median price for Center-Based Childcare ($)",
    x = "Study Year",
    color = "California Region",
    y = "") +
  theme(axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 6),
        aspect.ratio = 1,
        plot.title = element_text(size = 10),  
        legend.text = element_text(size = 7),  
        legend.title = element_text(size = 8),
        strip.text = element_text(size = 9),
        legend.spacing.y = unit(0.001, "lines")) +
  scale_color_manual(values = colorRampPalette(brewer.pal(7, "Accent"))(10))
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5
# Lab 4, Question 7
ggplot(data = center_childcare,
       aes( x = study_year, y = median_cost, color = census_region)) +
  geom_point(alpha = 0.5, size = 1.5) +
  geom_smooth() +
  facet_wrap(~age_group) +
  theme_bw(base_size = 10) +
  labs(
    title = "Weekly Median price for Center-Based Childcare ($)",
    x = "Study Year",
    color = "California Region",
    y = ""
  ) +
  theme(axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 6),
        aspect.ratio = 1,
        plot.title = element_text(size = 10),  
        legend.text = element_text(size = 7),  
        legend.title = element_text(size = 8),
        strip.text = element_text(size = 9),
        legend.spacing.y = unit(0.001, "lines")) +
  scale_color_manual(values = colorRampPalette(brewer.pal(7, "Accent"))(10))
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1
# Lab 4, Question 8
ca_childcare |>
  filter() |>
  ggplot(aes(x = mhi_2018, y = mfcc_infant)) +
  theme_light() +
  geom_point(alpha = 0.5, color = "plum") +
  geom_smooth(method = "lm", se = FALSE, color = "mediumorchid4") +
  labs(
    title = "Median Income (per Household) vs. Weekly Infant Childcare Cost (in California)",
    x = "Median Household Income",
    y = "Median Weekly Infant Cost") +
  scale_y_continuous(labels = scales:: label_currency(prefix = "$"))+
  scale_x_continuous(labels = scales:: label_currency(prefix = "$"))
```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2
# Lab 4, Question 7
ggplot(data = center_childcare,
       aes( x = study_year, y = median_cost, color = census_region)) +
  geom_point(alpha = 0.5, size = 1.5) +
  geom_smooth() +
  facet_wrap(~age_group) +
  theme_bw(base_size = 10) +
  labs(
    title = "Weekly Median price for Center-Based Childcare ($)",
    x = "Study Year",
    color = "California Region",
    y = ""
  ) +
  theme(axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 6),
        aspect.ratio = 1,
        plot.title = element_text(size = 10),  
        legend.text = element_text(size = 7),  
        legend.title = element_text(size = 8),
        strip.text = element_text(size = 9),
        legend.spacing.y = unit(0.001, "lines")) +
  scale_color_manual(values = colorRampPalette(brewer.pal(7, "Accent"))(10))
```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
# From Lab 3, Question 6
teacher_evals_clean |>
  summarize(
    n_distinct(course_id),
    n_distinct(teacher_id))
```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
# From Lab 3, Question 6
teacher_evals_clean |>
  summarize(
    n_distinct(course_id),
    n_distinct(teacher_id))
```

-   Example 2

```{r}
#| label: dvs-5-2
# From Lab 4, Question 5
region_table <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by (census_region, study_year) |>
  summarize(median_income = median(mhi_2018)) |>
  ungroup() |>
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "Year ") |>
  arrange(desc('2018'))
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2
# From Lab 4, Question 5
region_table <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by (census_region, study_year) |>
  summarize(median_income = median(mhi_2018)) |>
  ungroup() |>
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "Year ") |>
  arrange(desc('2018'))
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
# From Lab 3, Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter( no_participants > 10) |>
  mutate(
    teacher_id = as.character(teacher_id),
    weekday =  as.character(weekday)
  ) |>
  select(
    course_id,
    teacher_id, 
    question_no, 
    no_participants, 
    resp_share, 
    SET_score_avg, 
    percent_failed_cur, 
    academic_degree, 
    seniority, 
    sex )
```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1
# From Lab 3, Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter( no_participants > 10) |>
  mutate(
    teacher_id = as.character(teacher_id),
    weekday =  as.character(weekday)
  ) |>
  select(
    course_id,
    teacher_id, 
    question_no, 
    no_participants, 
    resp_share, 
    SET_score_avg, 
    percent_failed_cur, 
    academic_degree, 
    seniority, 
    sex )
```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
# Lab 4, Question 9
reg_mod1 <- lm( data = ca_childcare,  mfcc_infant~mhi_2018)
summary(reg_mod1)
```

-   Example 2

```{r}
#| label: dsm-2-2
# Challenge 3, Question 3
chi_test_table <- 
  table(teacher_evals_compare$set_level,
        teacher_evals_compare$sen_level)

chisq.test(chi_test_table)
```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

I have revised my thinking by getting a lot more mindful about chunking functions and focusing on concise code instead of simply one that works. Grouping mutate actions and filter actions, for instance, make it both easier for me to have concise code that I can skim through to look for errors or edit, and makes it easier for others to understand my code. Thus, I have revised my approach to writing code, and go back and edit my codes to ensure efficiency.

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

I have extended my thinking by really considering whether my color/ personal changes to my plots are helping the reader, or simply adding fun changes. At the start of this course, I would alter colors and plot features simply to test if I remembered the code. However, now, I really consider which changes would help the reader, and look at it more from a Data Analyst or Statistician view, extending my thinking and contemplating what aspects of the graph are less clear, could be clearer, or any edits I could make to overall help highlight the important trends present.

## Peer Support & Collaboration

Peer Review I gave that I am proud of:

![](images/Screen Shot 2025-10-26 at 10.48.17 PM.png){width="399"}

![](images/Screen Shot 2025-10-26 at 10.48.26 PM.png){width="368"}I think I grew as a collaborator by being a lot more open minded that oftentimes there are multiple different ways to approach a problem, or perform an action, most of which are not better or worse than the others. This has helped my thinking and understanding in the course, and really consider the various methods I could take to perform an action, and think whether a certain one is most helpful.
